/*
 * generated by Xtext
 */
package org.xtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CupidoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CupidoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cupido");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSchemataParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCommitmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommitmentsCommitmentParserRuleCall_1_0 = (RuleCall)cCommitmentsAssignment_1.eContents().get(0);
		
		//Cupido:
		//	Schemata commitments+=Commitment*;
		@Override public ParserRule getRule() { return rule; }

		//Schemata commitments+=Commitment*
		public Group getGroup() { return cGroup; }

		//Schemata
		public RuleCall getSchemataParserRuleCall_0() { return cSchemataParserRuleCall_0; }

		//commitments+=Commitment*
		public Assignment getCommitmentsAssignment_1() { return cCommitmentsAssignment_1; }

		//Commitment
		public RuleCall getCommitmentsCommitmentParserRuleCall_1_0() { return cCommitmentsCommitmentParserRuleCall_1_0; }
	}

	public class SchemataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Schemata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSCHEMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cSchemataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchemataEventRelationParserRuleCall_1_0 = (RuleCall)cSchemataAssignment_1.eContents().get(0);
		
		//Schemata:
		//	SCHEMA schemata+=EventRelation+;
		@Override public ParserRule getRule() { return rule; }

		//SCHEMA schemata+=EventRelation+
		public Group getGroup() { return cGroup; }

		//SCHEMA
		public RuleCall getSCHEMATerminalRuleCall_0() { return cSCHEMATerminalRuleCall_0; }

		//schemata+=EventRelation+
		public Assignment getSchemataAssignment_1() { return cSchemataAssignment_1; }

		//EventRelation
		public RuleCall getSchemataEventRelationParserRuleCall_1_0() { return cSchemataEventRelationParserRuleCall_1_0; }
	}

	public class EventRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventEventParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cKEYTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cKeyParamsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cKeyParamsParamParserRuleCall_6_0 = (RuleCall)cKeyParamsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cCOMMATerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cKeyParamsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cKeyParamsParamParserRuleCall_7_1_0 = (RuleCall)cKeyParamsAssignment_7_1.eContents().get(0);
		private final RuleCall cTIMETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cTimeParamAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTimeParamParamParserRuleCall_9_0 = (RuleCall)cTimeParamAssignment_9.eContents().get(0);
		
		//EventRelation:
		//	event=Event LPAREN params+=Param (COMMA params+=Param)* RPAREN KEY keyParams+=Param (COMMA keyParams+=Param)* TIME
		//	timeParam=Param;
		@Override public ParserRule getRule() { return rule; }

		//event=Event LPAREN params+=Param (COMMA params+=Param)* RPAREN KEY keyParams+=Param (COMMA keyParams+=Param)* TIME
		//timeParam=Param
		public Group getGroup() { return cGroup; }

		//event=Event
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//Event
		public RuleCall getEventEventParserRuleCall_0_0() { return cEventEventParserRuleCall_0_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }

		//params+=Param
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//Param
		public RuleCall getParamsParamParserRuleCall_2_0() { return cParamsParamParserRuleCall_2_0; }

		//(COMMA params+=Param)*
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//params+=Param
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }

		//Param
		public RuleCall getParamsParamParserRuleCall_3_1_0() { return cParamsParamParserRuleCall_3_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }

		//KEY
		public RuleCall getKEYTerminalRuleCall_5() { return cKEYTerminalRuleCall_5; }

		//keyParams+=Param
		public Assignment getKeyParamsAssignment_6() { return cKeyParamsAssignment_6; }

		//Param
		public RuleCall getKeyParamsParamParserRuleCall_6_0() { return cKeyParamsParamParserRuleCall_6_0; }

		//(COMMA keyParams+=Param)*
		public Group getGroup_7() { return cGroup_7; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_7_0() { return cCOMMATerminalRuleCall_7_0; }

		//keyParams+=Param
		public Assignment getKeyParamsAssignment_7_1() { return cKeyParamsAssignment_7_1; }

		//Param
		public RuleCall getKeyParamsParamParserRuleCall_7_1_0() { return cKeyParamsParamParserRuleCall_7_1_0; }

		//TIME
		public RuleCall getTIMETerminalRuleCall_8() { return cTIMETerminalRuleCall_8; }

		//timeParam=Param
		public Assignment getTimeParamAssignment_9() { return cTimeParamAssignment_9; }

		//Param
		public RuleCall getTimeParamParamParserRuleCall_9_0() { return cTimeParamParamParserRuleCall_9_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Param:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CommitmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commitment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMITTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cDebtorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDebtorIDTerminalRuleCall_2_0 = (RuleCall)cDebtorAssignment_2.eContents().get(0);
		private final RuleCall cTOTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cCreditorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCreditorIDTerminalRuleCall_4_0 = (RuleCall)cCreditorAssignment_4.eContents().get(0);
		private final RuleCall cCREATETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cTriggerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTriggerGeneralExprParserRuleCall_6_0 = (RuleCall)cTriggerAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cDETACHTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cAntecedentAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAntecedentGeneralExprParserRuleCall_7_1_0 = (RuleCall)cAntecedentAssignment_7_1.eContents().get(0);
		private final RuleCall cDISCHARGETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cConsequentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cConsequentGeneralExprParserRuleCall_9_0 = (RuleCall)cConsequentAssignment_9.eContents().get(0);
		
		//Commitment:
		//	COMMIT label=ID debtor=ID TO creditor=ID CREATE trigger=GeneralExpr (DETACH antecedent=GeneralExpr)? DISCHARGE
		//	consequent=GeneralExpr;
		@Override public ParserRule getRule() { return rule; }

		//COMMIT label=ID debtor=ID TO creditor=ID CREATE trigger=GeneralExpr (DETACH antecedent=GeneralExpr)? DISCHARGE
		//consequent=GeneralExpr
		public Group getGroup() { return cGroup; }

		//COMMIT
		public RuleCall getCOMMITTerminalRuleCall_0() { return cCOMMITTerminalRuleCall_0; }

		//label=ID
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0() { return cLabelIDTerminalRuleCall_1_0; }

		//debtor=ID
		public Assignment getDebtorAssignment_2() { return cDebtorAssignment_2; }

		//ID
		public RuleCall getDebtorIDTerminalRuleCall_2_0() { return cDebtorIDTerminalRuleCall_2_0; }

		//TO
		public RuleCall getTOTerminalRuleCall_3() { return cTOTerminalRuleCall_3; }

		//creditor=ID
		public Assignment getCreditorAssignment_4() { return cCreditorAssignment_4; }

		//ID
		public RuleCall getCreditorIDTerminalRuleCall_4_0() { return cCreditorIDTerminalRuleCall_4_0; }

		//CREATE
		public RuleCall getCREATETerminalRuleCall_5() { return cCREATETerminalRuleCall_5; }

		//trigger=GeneralExpr
		public Assignment getTriggerAssignment_6() { return cTriggerAssignment_6; }

		//GeneralExpr
		public RuleCall getTriggerGeneralExprParserRuleCall_6_0() { return cTriggerGeneralExprParserRuleCall_6_0; }

		//(DETACH antecedent=GeneralExpr)?
		public Group getGroup_7() { return cGroup_7; }

		//DETACH
		public RuleCall getDETACHTerminalRuleCall_7_0() { return cDETACHTerminalRuleCall_7_0; }

		//antecedent=GeneralExpr
		public Assignment getAntecedentAssignment_7_1() { return cAntecedentAssignment_7_1; }

		//GeneralExpr
		public RuleCall getAntecedentGeneralExprParserRuleCall_7_1_0() { return cAntecedentGeneralExprParserRuleCall_7_1_0; }

		//DISCHARGE
		public RuleCall getDISCHARGETerminalRuleCall_8() { return cDISCHARGETerminalRuleCall_8; }

		//consequent=GeneralExpr
		public Assignment getConsequentAssignment_9() { return cConsequentAssignment_9; }

		//GeneralExpr
		public RuleCall getConsequentGeneralExprParserRuleCall_9_0() { return cConsequentGeneralExprParserRuleCall_9_0; }
	}

	public class GeneralExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GeneralExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWhereAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cWhereWHERETerminalRuleCall_1_0_0 = (RuleCall)cWhereAssignment_1_0.eContents().get(0);
		private final Assignment cArithAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArithArithExprParserRuleCall_1_1_0 = (RuleCall)cArithAssignment_1_1.eContents().get(0);
		
		//GeneralExpr:
		//	expr=Expr (where=WHERE arith=ArithExpr)?;
		@Override public ParserRule getRule() { return rule; }

		//expr=Expr (where=WHERE arith=ArithExpr)?
		public Group getGroup() { return cGroup; }

		//expr=Expr
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_0() { return cExprExprParserRuleCall_0_0; }

		//(where=WHERE arith=ArithExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//where=WHERE
		public Assignment getWhereAssignment_1_0() { return cWhereAssignment_1_0; }

		//WHERE
		public RuleCall getWhereWHERETerminalRuleCall_1_0_0() { return cWhereWHERETerminalRuleCall_1_0_0; }

		//arith=ArithExpr
		public Assignment getArithAssignment_1_1() { return cArithAssignment_1_1; }

		//ArithExpr
		public RuleCall getArithArithExprParserRuleCall_1_1_0() { return cArithArithExprParserRuleCall_1_1_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntervalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntervalIntervalParserRuleCall_0_0 = (RuleCall)cIntervalAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLeftAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLeftIntervalParserRuleCall_1_0_0 = (RuleCall)cLeftAssignment_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEventOperatorParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLPARENTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//Expr:
		//	interval=Interval | left=Interval op=EventOperator right=Expr | LPAREN expr=Expr RPAREN;
		@Override public ParserRule getRule() { return rule; }

		//interval=Interval | left=Interval op=EventOperator right=Expr | LPAREN expr=Expr RPAREN
		public Alternatives getAlternatives() { return cAlternatives; }

		//interval=Interval
		public Assignment getIntervalAssignment_0() { return cIntervalAssignment_0; }

		//Interval
		public RuleCall getIntervalIntervalParserRuleCall_0_0() { return cIntervalIntervalParserRuleCall_0_0; }

		//left=Interval op=EventOperator right=Expr
		public Group getGroup_1() { return cGroup_1; }

		//left=Interval
		public Assignment getLeftAssignment_1_0() { return cLeftAssignment_1_0; }

		//Interval
		public RuleCall getLeftIntervalParserRuleCall_1_0_0() { return cLeftIntervalParserRuleCall_1_0_0; }

		//op=EventOperator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//EventOperator
		public RuleCall getOpEventOperatorParserRuleCall_1_1_0() { return cOpEventOperatorParserRuleCall_1_1_0; }

		//right=Expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expr
		public RuleCall getRightExprParserRuleCall_1_2_0() { return cRightExprParserRuleCall_1_2_0; }

		//LPAREN expr=Expr RPAREN
		public Group getGroup_2() { return cGroup_2; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2_0() { return cLPARENTerminalRuleCall_2_0; }

		//expr=Expr
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_1_0() { return cExprExprParserRuleCall_2_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2_2() { return cRPARENTerminalRuleCall_2_2; }
	}

	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEventEventParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cEventAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEventEventParserRuleCall_1_0_0 = (RuleCall)cEventAssignment_1_0.eContents().get(0);
		private final RuleCall cLBRACKETTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cLeftAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftTimeStampParserRuleCall_1_2_0 = (RuleCall)cLeftAssignment_1_2.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightTimeStampParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		private final RuleCall cRBRACKETTerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cEventAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEventEventParserRuleCall_2_0_0 = (RuleCall)cEventAssignment_2_0.eContents().get(0);
		private final RuleCall cLBRACKETTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRightTimeStampParserRuleCall_2_3_0 = (RuleCall)cRightAssignment_2_3.eContents().get(0);
		private final RuleCall cRBRACKETTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cEventAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEventEventParserRuleCall_3_0_0 = (RuleCall)cEventAssignment_3_0.eContents().get(0);
		private final RuleCall cLBRACKETTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cLeftAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLeftTimeStampParserRuleCall_3_2_0 = (RuleCall)cLeftAssignment_3_2.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final RuleCall cRBRACKETTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cEventAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEventEventParserRuleCall_4_0_0 = (RuleCall)cEventAssignment_4_0.eContents().get(0);
		private final RuleCall cLBRACKETTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final RuleCall cRBRACKETTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		
		//// Equivalent to the first option
		//Interval:
		//	event=Event | event=Event LBRACKET left=TimeStamp COMMA right=TimeStamp RBRACKET | event=Event LBRACKET COMMA
		//	right=TimeStamp RBRACKET | event=Event LBRACKET left=TimeStamp COMMA RBRACKET | event=Event LBRACKET COMMA RBRACKET;
		@Override public ParserRule getRule() { return rule; }

		//event=Event | event=Event LBRACKET left=TimeStamp COMMA right=TimeStamp RBRACKET | event=Event LBRACKET COMMA
		//right=TimeStamp RBRACKET | event=Event LBRACKET left=TimeStamp COMMA RBRACKET | event=Event LBRACKET COMMA RBRACKET
		public Alternatives getAlternatives() { return cAlternatives; }

		//event=Event
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//Event
		public RuleCall getEventEventParserRuleCall_0_0() { return cEventEventParserRuleCall_0_0; }

		//event=Event LBRACKET left=TimeStamp COMMA right=TimeStamp RBRACKET
		public Group getGroup_1() { return cGroup_1; }

		//event=Event
		public Assignment getEventAssignment_1_0() { return cEventAssignment_1_0; }

		//Event
		public RuleCall getEventEventParserRuleCall_1_0_0() { return cEventEventParserRuleCall_1_0_0; }

		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_1_1() { return cLBRACKETTerminalRuleCall_1_1; }

		//left=TimeStamp
		public Assignment getLeftAssignment_1_2() { return cLeftAssignment_1_2; }

		//TimeStamp
		public RuleCall getLeftTimeStampParserRuleCall_1_2_0() { return cLeftTimeStampParserRuleCall_1_2_0; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_3() { return cCOMMATerminalRuleCall_1_3; }

		//right=TimeStamp
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//TimeStamp
		public RuleCall getRightTimeStampParserRuleCall_1_4_0() { return cRightTimeStampParserRuleCall_1_4_0; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_1_5() { return cRBRACKETTerminalRuleCall_1_5; }

		//event=Event LBRACKET COMMA right=TimeStamp RBRACKET
		public Group getGroup_2() { return cGroup_2; }

		//event=Event
		public Assignment getEventAssignment_2_0() { return cEventAssignment_2_0; }

		//Event
		public RuleCall getEventEventParserRuleCall_2_0_0() { return cEventEventParserRuleCall_2_0_0; }

		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_2_1() { return cLBRACKETTerminalRuleCall_2_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_2() { return cCOMMATerminalRuleCall_2_2; }

		//right=TimeStamp
		public Assignment getRightAssignment_2_3() { return cRightAssignment_2_3; }

		//TimeStamp
		public RuleCall getRightTimeStampParserRuleCall_2_3_0() { return cRightTimeStampParserRuleCall_2_3_0; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_2_4() { return cRBRACKETTerminalRuleCall_2_4; }

		//event=Event LBRACKET left=TimeStamp COMMA RBRACKET
		public Group getGroup_3() { return cGroup_3; }

		//event=Event
		public Assignment getEventAssignment_3_0() { return cEventAssignment_3_0; }

		//Event
		public RuleCall getEventEventParserRuleCall_3_0_0() { return cEventEventParserRuleCall_3_0_0; }

		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_3_1() { return cLBRACKETTerminalRuleCall_3_1; }

		//left=TimeStamp
		public Assignment getLeftAssignment_3_2() { return cLeftAssignment_3_2; }

		//TimeStamp
		public RuleCall getLeftTimeStampParserRuleCall_3_2_0() { return cLeftTimeStampParserRuleCall_3_2_0; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_3() { return cCOMMATerminalRuleCall_3_3; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_3_4() { return cRBRACKETTerminalRuleCall_3_4; }

		//event=Event LBRACKET COMMA RBRACKET
		public Group getGroup_4() { return cGroup_4; }

		//event=Event
		public Assignment getEventAssignment_4_0() { return cEventAssignment_4_0; }

		//Event
		public RuleCall getEventEventParserRuleCall_4_0_0() { return cEventEventParserRuleCall_4_0_0; }

		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_4_1() { return cLBRACKETTerminalRuleCall_4_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_2() { return cCOMMATerminalRuleCall_4_2; }

		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_4_3() { return cRBRACKETTerminalRuleCall_4_3; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLifeStateAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cLifeStateAlternatives_1_0_0 = (Alternatives)cLifeStateAssignment_1_0.eContents().get(0);
		private final RuleCall cLifeStateCREATEDTerminalRuleCall_1_0_0_0 = (RuleCall)cLifeStateAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cLifeStateDETACHEDTerminalRuleCall_1_0_0_1 = (RuleCall)cLifeStateAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cLifeStateDISCHARGEDTerminalRuleCall_1_0_0_2 = (RuleCall)cLifeStateAlternatives_1_0_0.eContents().get(2);
		private final RuleCall cLifeStateEXPIREDTerminalRuleCall_1_0_0_3 = (RuleCall)cLifeStateAlternatives_1_0_0.eContents().get(3);
		private final RuleCall cLifeStateVIOLATEDTerminalRuleCall_1_0_0_4 = (RuleCall)cLifeStateAlternatives_1_0_0.eContents().get(4);
		private final Assignment cLabelAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_1_0 = (RuleCall)cLabelAssignment_1_1.eContents().get(0);
		
		//// Require labels instead of nesting
		//Event:
		//	name=ID | lifeState=(CREATED | DETACHED | DISCHARGED | EXPIRED | VIOLATED) label=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID | lifeState=(CREATED | DETACHED | DISCHARGED | EXPIRED | VIOLATED) label=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//lifeState=(CREATED | DETACHED | DISCHARGED | EXPIRED | VIOLATED) label=ID
		public Group getGroup_1() { return cGroup_1; }

		//lifeState=(CREATED | DETACHED | DISCHARGED | EXPIRED | VIOLATED)
		public Assignment getLifeStateAssignment_1_0() { return cLifeStateAssignment_1_0; }

		//CREATED | DETACHED | DISCHARGED | EXPIRED | VIOLATED
		public Alternatives getLifeStateAlternatives_1_0_0() { return cLifeStateAlternatives_1_0_0; }

		//CREATED
		public RuleCall getLifeStateCREATEDTerminalRuleCall_1_0_0_0() { return cLifeStateCREATEDTerminalRuleCall_1_0_0_0; }

		//DETACHED
		public RuleCall getLifeStateDETACHEDTerminalRuleCall_1_0_0_1() { return cLifeStateDETACHEDTerminalRuleCall_1_0_0_1; }

		//DISCHARGED
		public RuleCall getLifeStateDISCHARGEDTerminalRuleCall_1_0_0_2() { return cLifeStateDISCHARGEDTerminalRuleCall_1_0_0_2; }

		//EXPIRED
		public RuleCall getLifeStateEXPIREDTerminalRuleCall_1_0_0_3() { return cLifeStateEXPIREDTerminalRuleCall_1_0_0_3; }

		//VIOLATED
		public RuleCall getLifeStateVIOLATEDTerminalRuleCall_1_0_0_4() { return cLifeStateVIOLATEDTerminalRuleCall_1_0_0_4; }

		//label=ID
		public Assignment getLabelAssignment_1_1() { return cLabelAssignment_1_1; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_1_0() { return cLabelIDTerminalRuleCall_1_1_0; }
	}

	public class ArithExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArithExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAttrAttributeParserRuleCall_0_0 = (RuleCall)cLeftAttrAssignment_0.eContents().get(0);
		private final Assignment cBinOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBinOpBinaryOperatorParserRuleCall_1_0 = (RuleCall)cBinOpAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRightAttrAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRightAttrAttributeParserRuleCall_2_0_0 = (RuleCall)cRightAttrAssignment_2_0.eContents().get(0);
		private final Assignment cNumAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_2_1_0 = (RuleCall)cNumAssignment_2_1.eContents().get(0);
		
		//ArithExpr:
		//	leftAttr=Attribute //  arith = ((name = ID) (comparativeOp = BinaryOperator)  |
		//	//  LPAREN (arith = ArithExpr) RPAREN
		//	// We are not parsing arithmetic expressions, so I would like to pick up everything 
		//	// under ArithExpr and just pass it along
		//	binOp=BinaryOperator (rightAttr=Attribute | num=INT);
		@Override public ParserRule getRule() { return rule; }

		//leftAttr=Attribute //  arith = ((name = ID) (comparativeOp = BinaryOperator)  |
		////  LPAREN (arith = ArithExpr) RPAREN
		//// We are not parsing arithmetic expressions, so I would like to pick up everything 
		//// under ArithExpr and just pass it along
		//binOp=BinaryOperator (rightAttr=Attribute | num=INT)
		public Group getGroup() { return cGroup; }

		//leftAttr=Attribute
		public Assignment getLeftAttrAssignment_0() { return cLeftAttrAssignment_0; }

		//Attribute
		public RuleCall getLeftAttrAttributeParserRuleCall_0_0() { return cLeftAttrAttributeParserRuleCall_0_0; }

		//binOp=BinaryOperator
		public Assignment getBinOpAssignment_1() { return cBinOpAssignment_1; }

		//BinaryOperator
		public RuleCall getBinOpBinaryOperatorParserRuleCall_1_0() { return cBinOpBinaryOperatorParserRuleCall_1_0; }

		//rightAttr=Attribute | num=INT
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//rightAttr=Attribute
		public Assignment getRightAttrAssignment_2_0() { return cRightAttrAssignment_2_0; }

		//Attribute
		public RuleCall getRightAttrAttributeParserRuleCall_2_0_0() { return cRightAttrAttributeParserRuleCall_2_0_0; }

		//num=INT
		public Assignment getNumAssignment_2_1() { return cNumAssignment_2_1; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_2_1_0() { return cNumINTTerminalRuleCall_2_1_0; }
	}

	public class TimeStampElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeStamp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValINTTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cEventReferenceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEventReferenceIDTerminalRuleCall_1_0_0 = (RuleCall)cEventReferenceAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cShiftAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cShiftINTTerminalRuleCall_1_1_1_0 = (RuleCall)cShiftAssignment_1_1_1.eContents().get(0);
		
		//TimeStamp:
		//	val=INT | eventReference=ID (PLUS shift=INT)?;
		@Override public ParserRule getRule() { return rule; }

		//val=INT | eventReference=ID (PLUS shift=INT)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//val=INT
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//INT
		public RuleCall getValINTTerminalRuleCall_0_0() { return cValINTTerminalRuleCall_0_0; }

		//eventReference=ID (PLUS shift=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//eventReference=ID
		public Assignment getEventReferenceAssignment_1_0() { return cEventReferenceAssignment_1_0; }

		//ID
		public RuleCall getEventReferenceIDTerminalRuleCall_1_0_0() { return cEventReferenceIDTerminalRuleCall_1_0_0; }

		//(PLUS shift=INT)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_1_0() { return cPLUSTerminalRuleCall_1_1_0; }

		//shift=INT
		public Assignment getShiftAssignment_1_1_1() { return cShiftAssignment_1_1_1; }

		//INT
		public RuleCall getShiftINTTerminalRuleCall_1_1_1_0() { return cShiftINTTerminalRuleCall_1_1_1_0; }
	}

	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperator");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final RuleCall cOpLTTerminalRuleCall_0_0 = (RuleCall)cOpAlternatives_0.eContents().get(0);
		private final RuleCall cOpLEQTerminalRuleCall_0_1 = (RuleCall)cOpAlternatives_0.eContents().get(1);
		private final RuleCall cOpEQTerminalRuleCall_0_2 = (RuleCall)cOpAlternatives_0.eContents().get(2);
		private final RuleCall cOpGTTerminalRuleCall_0_3 = (RuleCall)cOpAlternatives_0.eContents().get(3);
		private final RuleCall cOpGEQTerminalRuleCall_0_4 = (RuleCall)cOpAlternatives_0.eContents().get(4);
		
		////TODO: Found INT in common Terminals but not NUMBER 
		////Number: // TODO: I didn't find a way to use the Xtext Number that some examples use
		////  name = ID;
		//BinaryOperator:
		//	op=(LT | LEQ | EQ | GT | GEQ);
		@Override public ParserRule getRule() { return rule; }

		//op=(LT | LEQ | EQ | GT | GEQ)
		public Assignment getOpAssignment() { return cOpAssignment; }

		//LT | LEQ | EQ | GT | GEQ
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }

		//LT
		public RuleCall getOpLTTerminalRuleCall_0_0() { return cOpLTTerminalRuleCall_0_0; }

		//LEQ
		public RuleCall getOpLEQTerminalRuleCall_0_1() { return cOpLEQTerminalRuleCall_0_1; }

		//EQ
		public RuleCall getOpEQTerminalRuleCall_0_2() { return cOpEQTerminalRuleCall_0_2; }

		//GT
		public RuleCall getOpGTTerminalRuleCall_0_3() { return cOpGTTerminalRuleCall_0_3; }

		//GEQ
		public RuleCall getOpGEQTerminalRuleCall_0_4() { return cOpGEQTerminalRuleCall_0_4; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Attribute:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class EventOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cANDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cORTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEXCEPTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////LifeCycleState:
		////  lifeState = (CREATED | DETACHED | DISCHARGED | EXPIRED | VIOLATED);
		//EventOperator:
		//	AND | OR | EXCEPT;
		@Override public ParserRule getRule() { return rule; }

		//AND | OR | EXCEPT
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND
		public RuleCall getANDTerminalRuleCall_0() { return cANDTerminalRuleCall_0; }

		//OR
		public RuleCall getORTerminalRuleCall_1() { return cORTerminalRuleCall_1; }

		//EXCEPT
		public RuleCall getEXCEPTTerminalRuleCall_2() { return cEXCEPTTerminalRuleCall_2; }
	}
	
	
	private final CupidoElements pCupido;
	private final SchemataElements pSchemata;
	private final EventRelationElements pEventRelation;
	private final ParamElements pParam;
	private final CommitmentElements pCommitment;
	private final GeneralExprElements pGeneralExpr;
	private final ExprElements pExpr;
	private final IntervalElements pInterval;
	private final EventElements pEvent;
	private final ArithExprElements pArithExpr;
	private final TimeStampElements pTimeStamp;
	private final BinaryOperatorElements pBinaryOperator;
	private final AttributeElements pAttribute;
	private final EventOperatorElements pEventOperator;
	private final TerminalRule tSCHEMA;
	private final TerminalRule tKEY;
	private final TerminalRule tTIME;
	private final TerminalRule tCOMMIT;
	private final TerminalRule tCREATE;
	private final TerminalRule tDETACH;
	private final TerminalRule tDISCHARGE;
	private final TerminalRule tTO;
	private final TerminalRule tEXCEPT;
	private final TerminalRule tAND;
	private final TerminalRule tOR;
	private final TerminalRule tWHERE;
	private final TerminalRule tCREATED;
	private final TerminalRule tDETACHED;
	private final TerminalRule tDISCHARGED;
	private final TerminalRule tEXPIRED;
	private final TerminalRule tVIOLATED;
	private final TerminalRule tCOMMA;
	private final TerminalRule tLBRACKET;
	private final TerminalRule tRBRACKET;
	private final TerminalRule tLPAREN;
	private final TerminalRule tRPAREN;
	private final TerminalRule tPLUS;
	private final TerminalRule tLT;
	private final TerminalRule tLEQ;
	private final TerminalRule tEQ;
	private final TerminalRule tGT;
	private final TerminalRule tGEQ;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CupidoGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCupido = new CupidoElements();
		this.pSchemata = new SchemataElements();
		this.pEventRelation = new EventRelationElements();
		this.pParam = new ParamElements();
		this.pCommitment = new CommitmentElements();
		this.pGeneralExpr = new GeneralExprElements();
		this.pExpr = new ExprElements();
		this.pInterval = new IntervalElements();
		this.pEvent = new EventElements();
		this.pArithExpr = new ArithExprElements();
		this.pTimeStamp = new TimeStampElements();
		this.pBinaryOperator = new BinaryOperatorElements();
		this.pAttribute = new AttributeElements();
		this.pEventOperator = new EventOperatorElements();
		this.tSCHEMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SCHEMA");
		this.tKEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KEY");
		this.tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIME");
		this.tCOMMIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMIT");
		this.tCREATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CREATE");
		this.tDETACH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DETACH");
		this.tDISCHARGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DISCHARGE");
		this.tTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TO");
		this.tEXCEPT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXCEPT");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND");
		this.tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR");
		this.tWHERE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHERE");
		this.tCREATED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CREATED");
		this.tDETACHED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DETACHED");
		this.tDISCHARGED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DISCHARGED");
		this.tEXPIRED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPIRED");
		this.tVIOLATED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VIOLATED");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA");
		this.tLBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACKET");
		this.tRBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACKET");
		this.tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN");
		this.tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS");
		this.tLT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LT");
		this.tLEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEQ");
		this.tEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQ");
		this.tGT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GT");
		this.tGEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GEQ");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.Cupido".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Cupido:
	//	Schemata commitments+=Commitment*;
	public CupidoElements getCupidoAccess() {
		return pCupido;
	}
	
	public ParserRule getCupidoRule() {
		return getCupidoAccess().getRule();
	}

	//Schemata:
	//	SCHEMA schemata+=EventRelation+;
	public SchemataElements getSchemataAccess() {
		return pSchemata;
	}
	
	public ParserRule getSchemataRule() {
		return getSchemataAccess().getRule();
	}

	//EventRelation:
	//	event=Event LPAREN params+=Param (COMMA params+=Param)* RPAREN KEY keyParams+=Param (COMMA keyParams+=Param)* TIME
	//	timeParam=Param;
	public EventRelationElements getEventRelationAccess() {
		return pEventRelation;
	}
	
	public ParserRule getEventRelationRule() {
		return getEventRelationAccess().getRule();
	}

	//Param:
	//	name=ID;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//Commitment:
	//	COMMIT label=ID debtor=ID TO creditor=ID CREATE trigger=GeneralExpr (DETACH antecedent=GeneralExpr)? DISCHARGE
	//	consequent=GeneralExpr;
	public CommitmentElements getCommitmentAccess() {
		return pCommitment;
	}
	
	public ParserRule getCommitmentRule() {
		return getCommitmentAccess().getRule();
	}

	//GeneralExpr:
	//	expr=Expr (where=WHERE arith=ArithExpr)?;
	public GeneralExprElements getGeneralExprAccess() {
		return pGeneralExpr;
	}
	
	public ParserRule getGeneralExprRule() {
		return getGeneralExprAccess().getRule();
	}

	//Expr:
	//	interval=Interval | left=Interval op=EventOperator right=Expr | LPAREN expr=Expr RPAREN;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//// Equivalent to the first option
	//Interval:
	//	event=Event | event=Event LBRACKET left=TimeStamp COMMA right=TimeStamp RBRACKET | event=Event LBRACKET COMMA
	//	right=TimeStamp RBRACKET | event=Event LBRACKET left=TimeStamp COMMA RBRACKET | event=Event LBRACKET COMMA RBRACKET;
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}

	//// Require labels instead of nesting
	//Event:
	//	name=ID | lifeState=(CREATED | DETACHED | DISCHARGED | EXPIRED | VIOLATED) label=ID;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//ArithExpr:
	//	leftAttr=Attribute //  arith = ((name = ID) (comparativeOp = BinaryOperator)  |
	//	//  LPAREN (arith = ArithExpr) RPAREN
	//	// We are not parsing arithmetic expressions, so I would like to pick up everything 
	//	// under ArithExpr and just pass it along
	//	binOp=BinaryOperator (rightAttr=Attribute | num=INT);
	public ArithExprElements getArithExprAccess() {
		return pArithExpr;
	}
	
	public ParserRule getArithExprRule() {
		return getArithExprAccess().getRule();
	}

	//TimeStamp:
	//	val=INT | eventReference=ID (PLUS shift=INT)?;
	public TimeStampElements getTimeStampAccess() {
		return pTimeStamp;
	}
	
	public ParserRule getTimeStampRule() {
		return getTimeStampAccess().getRule();
	}

	////TODO: Found INT in common Terminals but not NUMBER 
	////Number: // TODO: I didn't find a way to use the Xtext Number that some examples use
	////  name = ID;
	//BinaryOperator:
	//	op=(LT | LEQ | EQ | GT | GEQ);
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return pBinaryOperator;
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//Attribute:
	//	name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	////LifeCycleState:
	////  lifeState = (CREATED | DETACHED | DISCHARGED | EXPIRED | VIOLATED);
	//EventOperator:
	//	AND | OR | EXCEPT;
	public EventOperatorElements getEventOperatorAccess() {
		return pEventOperator;
	}
	
	public ParserRule getEventOperatorRule() {
		return getEventOperatorAccess().getRule();
	}

	//terminal SCHEMA:
	//	"schema";
	public TerminalRule getSCHEMARule() {
		return tSCHEMA;
	} 

	//terminal KEY:
	//	"key";
	public TerminalRule getKEYRule() {
		return tKEY;
	} 

	//terminal TIME:
	//	"time";
	public TerminalRule getTIMERule() {
		return tTIME;
	} 

	//terminal COMMIT:
	//	"commitment";
	public TerminalRule getCOMMITRule() {
		return tCOMMIT;
	} 

	//terminal CREATE:
	//	"create";
	public TerminalRule getCREATERule() {
		return tCREATE;
	} 

	//terminal DETACH:
	//	"detach";
	public TerminalRule getDETACHRule() {
		return tDETACH;
	} 

	//terminal DISCHARGE:
	//	"discharge";
	public TerminalRule getDISCHARGERule() {
		return tDISCHARGE;
	} 

	//terminal TO:
	//	"to";
	public TerminalRule getTORule() {
		return tTO;
	} 

	//terminal EXCEPT:
	//	"except";
	public TerminalRule getEXCEPTRule() {
		return tEXCEPT;
	} 

	//terminal AND:
	//	"and";
	public TerminalRule getANDRule() {
		return tAND;
	} 

	//terminal OR:
	//	"or";
	public TerminalRule getORRule() {
		return tOR;
	} 

	//terminal WHERE:
	//	"where";
	public TerminalRule getWHERERule() {
		return tWHERE;
	} 

	//terminal CREATED:
	//	"created";
	public TerminalRule getCREATEDRule() {
		return tCREATED;
	} 

	//terminal DETACHED:
	//	"detached";
	public TerminalRule getDETACHEDRule() {
		return tDETACHED;
	} 

	//terminal DISCHARGED:
	//	"discharged";
	public TerminalRule getDISCHARGEDRule() {
		return tDISCHARGED;
	} 

	//terminal EXPIRED:
	//	"expired";
	public TerminalRule getEXPIREDRule() {
		return tEXPIRED;
	} 

	//terminal VIOLATED:
	//	"violated";
	public TerminalRule getVIOLATEDRule() {
		return tVIOLATED;
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	} 

	//terminal LBRACKET:
	//	"[";
	public TerminalRule getLBRACKETRule() {
		return tLBRACKET;
	} 

	//terminal RBRACKET:
	//	"]";
	public TerminalRule getRBRACKETRule() {
		return tRBRACKET;
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return tLPAREN;
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return tRPAREN;
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return tPLUS;
	} 

	//terminal LT:
	//	"<";
	public TerminalRule getLTRule() {
		return tLT;
	} 

	//terminal LEQ:
	//	"<=";
	public TerminalRule getLEQRule() {
		return tLEQ;
	} 

	//terminal EQ:
	//	"=";
	public TerminalRule getEQRule() {
		return tEQ;
	} 

	//terminal GT:
	//	">";
	public TerminalRule getGTRule() {
		return tGT;
	} 

	//terminal GEQ:
	//	">=";
	public TerminalRule getGEQRule() {
		return tGEQ;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
