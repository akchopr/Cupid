/*
 * generated by Xtext
 */
package org.xtext.example.generator;

import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Main {
	
	
	
	public static void main(String[] args) {
		if (args.length==0) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new org.xtext.example.CupidoStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args[0]);
	}
	
	@Inject 
	private Provider<ResourceSet> resourceSetProvider;
	
	@Inject
	private IResourceValidator validator;
	
	@Inject
	private IGenerator generator;
	
	@Inject 
	private JavaIoFileSystemAccess fileAccess;
	

	protected void runGenerator(String string) {
		// load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createURI(string), true);
		
		// validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}
		
		// configure and start the generator
		fileAccess.setOutputPath("src-gen/");
		generator.doGenerate(resource, fileAccess);
		
		System.out.println("Code generation finished.");
		
			
		//String[] args = {"Hello"};
		//launch(args);
	}

	/*@Override
	public void start(Stage primaryStage) throws Exception {
		Parser parser = Parser.getParser();
		Set<String> labels = parser.getCommitmentLabels();
		
		// TODO Auto-generated method stub
		primaryStage.setTitle("Tree View Sample");        
        
        TreeItem<String> rootItem = new TreeItem<String> ("Commitments",null);
        rootItem.setExpanded(true);
        for (String label:labels) {
            TreeItem<String> item = new TreeItem<String> (label);
            TreeItem<String> created = new TreeItem<String>(Parser.CREATED);
            
            
            TreeItem<String> detached = new TreeItem<String>(Parser.DETACHED);
            TreeItem<String> expired = new TreeItem<String>(Parser.EXPIRED);
            TreeItem<String> discharged = new TreeItem<String>(Parser.DISCHARGED);
            TreeItem<String> violated = new TreeItem<String>(Parser.VIOLATED);
           
            item.getChildren().add(created);
            item.getChildren().add(detached);
            item.getChildren().add(expired);
            item.getChildren().add(discharged);
            item.getChildren().add(violated);
      
            rootItem.getChildren().add(item);
        }        
        TreeView<String> tree = new TreeView<String> (rootItem);        
            StackPane root = new StackPane();
        root.getChildren().add(tree);
        primaryStage.setScene(new Scene(root, 300, 250));
        primaryStage.show();
		
	}*/
	
}