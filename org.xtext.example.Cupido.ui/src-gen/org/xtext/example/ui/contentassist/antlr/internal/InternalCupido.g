/*
 * generated by Xtext
 */
grammar InternalCupido;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.services.CupidoGrammarAccess;

}

@parser::members {
 
 	private CupidoGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CupidoGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCupido
entryRuleCupido 
:
{ before(grammarAccess.getCupidoRule()); }
	 ruleCupido
{ after(grammarAccess.getCupidoRule()); } 
	 EOF 
;

// Rule Cupido
ruleCupido
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCupidoAccess().getGroup()); }
(rule__Cupido__Group__0)
{ after(grammarAccess.getCupidoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchemata
entryRuleSchemata 
:
{ before(grammarAccess.getSchemataRule()); }
	 ruleSchemata
{ after(grammarAccess.getSchemataRule()); } 
	 EOF 
;

// Rule Schemata
ruleSchemata
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemataAccess().getGroup()); }
(rule__Schemata__Group__0)
{ after(grammarAccess.getSchemataAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventRelation
entryRuleEventRelation 
:
{ before(grammarAccess.getEventRelationRule()); }
	 ruleEventRelation
{ after(grammarAccess.getEventRelationRule()); } 
	 EOF 
;

// Rule EventRelation
ruleEventRelation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventRelationAccess().getGroup()); }
(rule__EventRelation__Group__0)
{ after(grammarAccess.getEventRelationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParam
entryRuleParam 
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamAccess().getNameAssignment()); }
(rule__Param__NameAssignment)
{ after(grammarAccess.getParamAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommitment
entryRuleCommitment 
:
{ before(grammarAccess.getCommitmentRule()); }
	 ruleCommitment
{ after(grammarAccess.getCommitmentRule()); } 
	 EOF 
;

// Rule Commitment
ruleCommitment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommitmentAccess().getGroup()); }
(rule__Commitment__Group__0)
{ after(grammarAccess.getCommitmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEExpr
entryRuleEExpr 
:
{ before(grammarAccess.getEExprRule()); }
	 ruleEExpr
{ after(grammarAccess.getEExprRule()); } 
	 EOF 
;

// Rule EExpr
ruleEExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEExprAccess().getGroup()); }
(rule__EExpr__Group__0)
{ after(grammarAccess.getEExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOExpr
entryRuleOExpr 
:
{ before(grammarAccess.getOExprRule()); }
	 ruleOExpr
{ after(grammarAccess.getOExprRule()); } 
	 EOF 
;

// Rule OExpr
ruleOExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOExprAccess().getGroup()); }
(rule__OExpr__Group__0)
{ after(grammarAccess.getOExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAExpr
entryRuleAExpr 
:
{ before(grammarAccess.getAExprRule()); }
	 ruleAExpr
{ after(grammarAccess.getAExprRule()); } 
	 EOF 
;

// Rule AExpr
ruleAExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAExprAccess().getGroup()); }
(rule__AExpr__Group__0)
{ after(grammarAccess.getAExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWExpr
entryRuleWExpr 
:
{ before(grammarAccess.getWExprRule()); }
	 ruleWExpr
{ after(grammarAccess.getWExprRule()); } 
	 EOF 
;

// Rule WExpr
ruleWExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWExprAccess().getGroup()); }
(rule__WExpr__Group__0)
{ after(grammarAccess.getWExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBExpr
entryRuleBExpr 
:
{ before(grammarAccess.getBExprRule()); }
	 ruleBExpr
{ after(grammarAccess.getBExprRule()); } 
	 EOF 
;

// Rule BExpr
ruleBExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBExprAccess().getAlternatives()); }
(rule__BExpr__Alternatives)
{ after(grammarAccess.getBExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterval
entryRuleInterval 
:
{ before(grammarAccess.getIntervalRule()); }
	 ruleInterval
{ after(grammarAccess.getIntervalRule()); } 
	 EOF 
;

// Rule Interval
ruleInterval
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntervalAccess().getAlternatives()); }
(rule__Interval__Alternatives)
{ after(grammarAccess.getIntervalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getAlternatives()); }
(rule__Event__Alternatives)
{ after(grammarAccess.getEventAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeStamp
entryRuleTimeStamp 
:
{ before(grammarAccess.getTimeStampRule()); }
	 ruleTimeStamp
{ after(grammarAccess.getTimeStampRule()); } 
	 EOF 
;

// Rule TimeStamp
ruleTimeStamp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeStampAccess().getAlternatives()); }
(rule__TimeStamp__Alternatives)
{ after(grammarAccess.getTimeStampAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBExprAccess().getIntervalParserRuleCall_0()); }
	ruleInterval
{ after(grammarAccess.getBExprAccess().getIntervalParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBExprAccess().getGroup_1()); }
(rule__BExpr__Group_1__0)
{ after(grammarAccess.getBExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventAssignment_0()); }
(rule__Interval__EventAssignment_0)
{ after(grammarAccess.getIntervalAccess().getEventAssignment_0()); }
)

    |(
{ before(grammarAccess.getIntervalAccess().getGroup_1()); }
(rule__Interval__Group_1__0)
{ after(grammarAccess.getIntervalAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getIntervalAccess().getGroup_2()); }
(rule__Interval__Group_2__0)
{ after(grammarAccess.getIntervalAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getIntervalAccess().getGroup_3()); }
(rule__Interval__Group_3__0)
{ after(grammarAccess.getIntervalAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getIntervalAccess().getGroup_4()); }
(rule__Interval__Group_4__0)
{ after(grammarAccess.getIntervalAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameAssignment_0()); }
(rule__Event__NameAssignment_0)
{ after(grammarAccess.getEventAccess().getNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getEventAccess().getGroup_1()); }
(rule__Event__Group_1__0)
{ after(grammarAccess.getEventAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__LifeStateAlternatives_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLifeStateCREATEDTerminalRuleCall_1_0_0_0()); }
	RULE_CREATED
{ after(grammarAccess.getEventAccess().getLifeStateCREATEDTerminalRuleCall_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getEventAccess().getLifeStateDETACHEDTerminalRuleCall_1_0_0_1()); }
	RULE_DETACHED
{ after(grammarAccess.getEventAccess().getLifeStateDETACHEDTerminalRuleCall_1_0_0_1()); }
)

    |(
{ before(grammarAccess.getEventAccess().getLifeStateDISCHARGEDTerminalRuleCall_1_0_0_2()); }
	RULE_DISCHARGED
{ after(grammarAccess.getEventAccess().getLifeStateDISCHARGEDTerminalRuleCall_1_0_0_2()); }
)

    |(
{ before(grammarAccess.getEventAccess().getLifeStateEXPIREDTerminalRuleCall_1_0_0_3()); }
	RULE_EXPIRED
{ after(grammarAccess.getEventAccess().getLifeStateEXPIREDTerminalRuleCall_1_0_0_3()); }
)

    |(
{ before(grammarAccess.getEventAccess().getLifeStateVIOLATEDTerminalRuleCall_1_0_0_4()); }
	RULE_VIOLATED
{ after(grammarAccess.getEventAccess().getLifeStateVIOLATEDTerminalRuleCall_1_0_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeStamp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeStampAccess().getValAssignment_0()); }
(rule__TimeStamp__ValAssignment_0)
{ after(grammarAccess.getTimeStampAccess().getValAssignment_0()); }
)

    |(
{ before(grammarAccess.getTimeStampAccess().getGroup_1()); }
(rule__TimeStamp__Group_1__0)
{ after(grammarAccess.getTimeStampAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Cupido__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cupido__Group__0__Impl
	rule__Cupido__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cupido__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCupidoAccess().getSchemataParserRuleCall_0()); }
	ruleSchemata
{ after(grammarAccess.getCupidoAccess().getSchemataParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cupido__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cupido__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cupido__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCupidoAccess().getCommitmentsAssignment_1()); }
(rule__Cupido__CommitmentsAssignment_1)*
{ after(grammarAccess.getCupidoAccess().getCommitmentsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Schemata__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schemata__Group__0__Impl
	rule__Schemata__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Schemata__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemataAccess().getSCHEMATerminalRuleCall_0()); }
	RULE_SCHEMA
{ after(grammarAccess.getSchemataAccess().getSCHEMATerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schemata__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schemata__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Schemata__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSchemataAccess().getSchemataAssignment_1()); }
(rule__Schemata__SchemataAssignment_1)
{ after(grammarAccess.getSchemataAccess().getSchemataAssignment_1()); }
)
(
{ before(grammarAccess.getSchemataAccess().getSchemataAssignment_1()); }
(rule__Schemata__SchemataAssignment_1)*
{ after(grammarAccess.getSchemataAccess().getSchemataAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventRelation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__0__Impl
	rule__EventRelation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getEventAssignment_0()); }
(rule__EventRelation__EventAssignment_0)
{ after(grammarAccess.getEventRelationAccess().getEventAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__1__Impl
	rule__EventRelation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getLPARENTerminalRuleCall_1()); }
	RULE_LPAREN
{ after(grammarAccess.getEventRelationAccess().getLPARENTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__2__Impl
	rule__EventRelation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getParamsAssignment_2()); }
(rule__EventRelation__ParamsAssignment_2)
{ after(grammarAccess.getEventRelationAccess().getParamsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__3__Impl
	rule__EventRelation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getGroup_3()); }
(rule__EventRelation__Group_3__0)*
{ after(grammarAccess.getEventRelationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__4__Impl
	rule__EventRelation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getRPARENTerminalRuleCall_4()); }
	RULE_RPAREN
{ after(grammarAccess.getEventRelationAccess().getRPARENTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__5__Impl
	rule__EventRelation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getKEYTerminalRuleCall_5()); }
	RULE_KEY
{ after(grammarAccess.getEventRelationAccess().getKEYTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__6__Impl
	rule__EventRelation__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getKeyParamsAssignment_6()); }
(rule__EventRelation__KeyParamsAssignment_6)
{ after(grammarAccess.getEventRelationAccess().getKeyParamsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__7__Impl
	rule__EventRelation__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getGroup_7()); }
(rule__EventRelation__Group_7__0)*
{ after(grammarAccess.getEventRelationAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__8__Impl
	rule__EventRelation__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getTIMETerminalRuleCall_8()); }
	RULE_TIME
{ after(grammarAccess.getEventRelationAccess().getTIMETerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getTimeParamAssignment_9()); }
(rule__EventRelation__TimeParamAssignment_9)
{ after(grammarAccess.getEventRelationAccess().getTimeParamAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__EventRelation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group_3__0__Impl
	rule__EventRelation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getCOMMATerminalRuleCall_3_0()); }
	RULE_COMMA
{ after(grammarAccess.getEventRelationAccess().getCOMMATerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getParamsAssignment_3_1()); }
(rule__EventRelation__ParamsAssignment_3_1)
{ after(grammarAccess.getEventRelationAccess().getParamsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventRelation__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group_7__0__Impl
	rule__EventRelation__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getCOMMATerminalRuleCall_7_0()); }
	RULE_COMMA
{ after(grammarAccess.getEventRelationAccess().getCOMMATerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRelation__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRelation__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getKeyParamsAssignment_7_1()); }
(rule__EventRelation__KeyParamsAssignment_7_1)
{ after(grammarAccess.getEventRelationAccess().getKeyParamsAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Commitment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__0__Impl
	rule__Commitment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getCOMMITTerminalRuleCall_0()); }
	RULE_COMMIT
{ after(grammarAccess.getCommitmentAccess().getCOMMITTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__1__Impl
	rule__Commitment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getLabelAssignment_1()); }
(rule__Commitment__LabelAssignment_1)
{ after(grammarAccess.getCommitmentAccess().getLabelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__2__Impl
	rule__Commitment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getDebtorAssignment_2()); }
(rule__Commitment__DebtorAssignment_2)
{ after(grammarAccess.getCommitmentAccess().getDebtorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__3__Impl
	rule__Commitment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getTOTerminalRuleCall_3()); }
	RULE_TO
{ after(grammarAccess.getCommitmentAccess().getTOTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__4__Impl
	rule__Commitment__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getCreditorAssignment_4()); }
(rule__Commitment__CreditorAssignment_4)
{ after(grammarAccess.getCommitmentAccess().getCreditorAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__5__Impl
	rule__Commitment__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getCREATETerminalRuleCall_5()); }
	RULE_CREATE
{ after(grammarAccess.getCommitmentAccess().getCREATETerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__6__Impl
	rule__Commitment__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getTriggerAssignment_6()); }
(rule__Commitment__TriggerAssignment_6)
{ after(grammarAccess.getCommitmentAccess().getTriggerAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__7__Impl
	rule__Commitment__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getGroup_7()); }
(rule__Commitment__Group_7__0)?
{ after(grammarAccess.getCommitmentAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__8__Impl
	rule__Commitment__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getDISCHARGETerminalRuleCall_8()); }
	RULE_DISCHARGE
{ after(grammarAccess.getCommitmentAccess().getDISCHARGETerminalRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getConsequentAssignment_9()); }
(rule__Commitment__ConsequentAssignment_9)
{ after(grammarAccess.getCommitmentAccess().getConsequentAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Commitment__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group_7__0__Impl
	rule__Commitment__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getDETACHTerminalRuleCall_7_0()); }
	RULE_DETACH
{ after(grammarAccess.getCommitmentAccess().getDETACHTerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Commitment__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Commitment__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getAntecedentAssignment_7_1()); }
(rule__Commitment__AntecedentAssignment_7_1)
{ after(grammarAccess.getCommitmentAccess().getAntecedentAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EExpr__Group__0__Impl
	rule__EExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEExprAccess().getOExprParserRuleCall_0()); }
	ruleOExpr
{ after(grammarAccess.getEExprAccess().getOExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEExprAccess().getGroup_1()); }
(rule__EExpr__Group_1__0)*
{ after(grammarAccess.getEExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EExpr__Group_1__0__Impl
	rule__EExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEExprAccess().getEExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getEExprAccess().getEExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EExpr__Group_1__1__Impl
	rule__EExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEExprAccess().getEXCEPTTerminalRuleCall_1_1()); }
	RULE_EXCEPT
{ after(grammarAccess.getEExprAccess().getEXCEPTTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEExprAccess().getRightAssignment_1_2()); }
(rule__EExpr__RightAssignment_1_2)
{ after(grammarAccess.getEExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OExpr__Group__0__Impl
	rule__OExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOExprAccess().getAExprParserRuleCall_0()); }
	ruleAExpr
{ after(grammarAccess.getOExprAccess().getAExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOExprAccess().getGroup_1()); }
(rule__OExpr__Group_1__0)*
{ after(grammarAccess.getOExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OExpr__Group_1__0__Impl
	rule__OExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOExprAccess().getOExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOExprAccess().getOExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OExpr__Group_1__1__Impl
	rule__OExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOExprAccess().getORTerminalRuleCall_1_1()); }
	RULE_OR
{ after(grammarAccess.getOExprAccess().getORTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOExprAccess().getRightAssignment_1_2()); }
(rule__OExpr__RightAssignment_1_2)
{ after(grammarAccess.getOExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExpr__Group__0__Impl
	rule__AExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExprAccess().getWExprParserRuleCall_0()); }
	ruleWExpr
{ after(grammarAccess.getAExprAccess().getWExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExprAccess().getGroup_1()); }
(rule__AExpr__Group_1__0)*
{ after(grammarAccess.getAExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExpr__Group_1__0__Impl
	rule__AExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExprAccess().getAExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAExprAccess().getAExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExpr__Group_1__1__Impl
	rule__AExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExprAccess().getANDTerminalRuleCall_1_1()); }
	RULE_AND
{ after(grammarAccess.getAExprAccess().getANDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExprAccess().getRightAssignment_1_2()); }
(rule__AExpr__RightAssignment_1_2)
{ after(grammarAccess.getAExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WExpr__Group__0__Impl
	rule__WExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWExprAccess().getBExprParserRuleCall_0()); }
	ruleBExpr
{ after(grammarAccess.getWExprAccess().getBExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWExprAccess().getGroup_1()); }
(rule__WExpr__Group_1__0)*
{ after(grammarAccess.getWExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WExpr__Group_1__0__Impl
	rule__WExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWExprAccess().getWExprLeftAction_1_0()); }
(

)
{ after(grammarAccess.getWExprAccess().getWExprLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WExpr__Group_1__1__Impl
	rule__WExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWExprAccess().getWHERETerminalRuleCall_1_1()); }
	RULE_WHERE
{ after(grammarAccess.getWExprAccess().getWHERETerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWExprAccess().getRightAssignment_1_2()); }
(rule__WExpr__RightAssignment_1_2)
{ after(grammarAccess.getWExprAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BExpr__Group_1__0__Impl
	rule__BExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBExprAccess().getLPARENTerminalRuleCall_1_0()); }
	RULE_LPAREN
{ after(grammarAccess.getBExprAccess().getLPARENTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BExpr__Group_1__1__Impl
	rule__BExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBExprAccess().getEExprParserRuleCall_1_1()); }
	ruleEExpr
{ after(grammarAccess.getBExprAccess().getEExprParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBExprAccess().getRPARENTerminalRuleCall_1_2()); }
	RULE_RPAREN
{ after(grammarAccess.getBExprAccess().getRPARENTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Interval__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_1__0__Impl
	rule__Interval__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventAssignment_1_0()); }
(rule__Interval__EventAssignment_1_0)
{ after(grammarAccess.getIntervalAccess().getEventAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_1__1__Impl
	rule__Interval__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getLBRACKETTerminalRuleCall_1_1()); }
	RULE_LBRACKET
{ after(grammarAccess.getIntervalAccess().getLBRACKETTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_1__2__Impl
	rule__Interval__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getLTimeAssignment_1_2()); }
(rule__Interval__LTimeAssignment_1_2)
{ after(grammarAccess.getIntervalAccess().getLTimeAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_1__3__Impl
	rule__Interval__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getCOMMATerminalRuleCall_1_3()); }
	RULE_COMMA
{ after(grammarAccess.getIntervalAccess().getCOMMATerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_1__4__Impl
	rule__Interval__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getRTimeAssignment_1_4()); }
(rule__Interval__RTimeAssignment_1_4)
{ after(grammarAccess.getIntervalAccess().getRTimeAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getRBRACKETTerminalRuleCall_1_5()); }
	RULE_RBRACKET
{ after(grammarAccess.getIntervalAccess().getRBRACKETTerminalRuleCall_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Interval__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_2__0__Impl
	rule__Interval__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventAssignment_2_0()); }
(rule__Interval__EventAssignment_2_0)
{ after(grammarAccess.getIntervalAccess().getEventAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_2__1__Impl
	rule__Interval__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getLBRACKETTerminalRuleCall_2_1()); }
	RULE_LBRACKET
{ after(grammarAccess.getIntervalAccess().getLBRACKETTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_2__2__Impl
	rule__Interval__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getCOMMATerminalRuleCall_2_2()); }
	RULE_COMMA
{ after(grammarAccess.getIntervalAccess().getCOMMATerminalRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_2__3__Impl
	rule__Interval__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getRTimeAssignment_2_3()); }
(rule__Interval__RTimeAssignment_2_3)
{ after(grammarAccess.getIntervalAccess().getRTimeAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getRBRACKETTerminalRuleCall_2_4()); }
	RULE_RBRACKET
{ after(grammarAccess.getIntervalAccess().getRBRACKETTerminalRuleCall_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Interval__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_3__0__Impl
	rule__Interval__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventAssignment_3_0()); }
(rule__Interval__EventAssignment_3_0)
{ after(grammarAccess.getIntervalAccess().getEventAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_3__1__Impl
	rule__Interval__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getLBRACKETTerminalRuleCall_3_1()); }
	RULE_LBRACKET
{ after(grammarAccess.getIntervalAccess().getLBRACKETTerminalRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_3__2__Impl
	rule__Interval__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getLTimeAssignment_3_2()); }
(rule__Interval__LTimeAssignment_3_2)
{ after(grammarAccess.getIntervalAccess().getLTimeAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_3__3__Impl
	rule__Interval__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getCOMMATerminalRuleCall_3_3()); }
	RULE_COMMA
{ after(grammarAccess.getIntervalAccess().getCOMMATerminalRuleCall_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_3__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_3__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getRBRACKETTerminalRuleCall_3_4()); }
	RULE_RBRACKET
{ after(grammarAccess.getIntervalAccess().getRBRACKETTerminalRuleCall_3_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Interval__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_4__0__Impl
	rule__Interval__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventAssignment_4_0()); }
(rule__Interval__EventAssignment_4_0)
{ after(grammarAccess.getIntervalAccess().getEventAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_4__1__Impl
	rule__Interval__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getLBRACKETTerminalRuleCall_4_1()); }
	RULE_LBRACKET
{ after(grammarAccess.getIntervalAccess().getLBRACKETTerminalRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_4__2__Impl
	rule__Interval__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getCOMMATerminalRuleCall_4_2()); }
	RULE_COMMA
{ after(grammarAccess.getIntervalAccess().getCOMMATerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getRBRACKETTerminalRuleCall_4_3()); }
	RULE_RBRACKET
{ after(grammarAccess.getIntervalAccess().getRBRACKETTerminalRuleCall_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Event__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1__0__Impl
	rule__Event__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLifeStateAssignment_1_0()); }
(rule__Event__LifeStateAssignment_1_0)
{ after(grammarAccess.getEventAccess().getLifeStateAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLabelAssignment_1_1()); }
(rule__Event__LabelAssignment_1_1)
{ after(grammarAccess.getEventAccess().getLabelAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimeStamp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeStamp__Group_1__0__Impl
	rule__TimeStamp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeStamp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeStampAccess().getEventReferenceAssignment_1_0()); }
(rule__TimeStamp__EventReferenceAssignment_1_0)
{ after(grammarAccess.getTimeStampAccess().getEventReferenceAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeStamp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeStamp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeStamp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeStampAccess().getGroup_1_1()); }
(rule__TimeStamp__Group_1_1__0)?
{ after(grammarAccess.getTimeStampAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimeStamp__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeStamp__Group_1_1__0__Impl
	rule__TimeStamp__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeStamp__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeStampAccess().getPLUSTerminalRuleCall_1_1_0()); }
	RULE_PLUS
{ after(grammarAccess.getTimeStampAccess().getPLUSTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeStamp__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeStamp__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeStamp__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeStampAccess().getShiftAssignment_1_1_1()); }
(rule__TimeStamp__ShiftAssignment_1_1_1)
{ after(grammarAccess.getTimeStampAccess().getShiftAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Cupido__CommitmentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCupidoAccess().getCommitmentsCommitmentParserRuleCall_1_0()); }
	ruleCommitment{ after(grammarAccess.getCupidoAccess().getCommitmentsCommitmentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schemata__SchemataAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemataAccess().getSchemataEventRelationParserRuleCall_1_0()); }
	ruleEventRelation{ after(grammarAccess.getSchemataAccess().getSchemataEventRelationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__EventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getEventEventParserRuleCall_0_0()); }
	ruleEvent{ after(grammarAccess.getEventRelationAccess().getEventEventParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__ParamsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getParamsParamParserRuleCall_2_0()); }
	ruleParam{ after(grammarAccess.getEventRelationAccess().getParamsParamParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__ParamsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getParamsParamParserRuleCall_3_1_0()); }
	ruleParam{ after(grammarAccess.getEventRelationAccess().getParamsParamParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__KeyParamsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getKeyParamsParamParserRuleCall_6_0()); }
	ruleParam{ after(grammarAccess.getEventRelationAccess().getKeyParamsParamParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__KeyParamsAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getKeyParamsParamParserRuleCall_7_1_0()); }
	ruleParam{ after(grammarAccess.getEventRelationAccess().getKeyParamsParamParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRelation__TimeParamAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRelationAccess().getTimeParamParamParserRuleCall_9_0()); }
	ruleParam{ after(grammarAccess.getEventRelationAccess().getTimeParamParamParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Param__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__LabelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getLabelIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCommitmentAccess().getLabelIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__DebtorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getDebtorIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getCommitmentAccess().getDebtorIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__CreditorAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getCreditorIDTerminalRuleCall_4_0()); }
	RULE_ID{ after(grammarAccess.getCommitmentAccess().getCreditorIDTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__TriggerAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getTriggerEExprParserRuleCall_6_0()); }
	ruleEExpr{ after(grammarAccess.getCommitmentAccess().getTriggerEExprParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__AntecedentAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getAntecedentEExprParserRuleCall_7_1_0()); }
	ruleEExpr{ after(grammarAccess.getCommitmentAccess().getAntecedentEExprParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Commitment__ConsequentAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommitmentAccess().getConsequentEExprParserRuleCall_9_0()); }
	ruleEExpr{ after(grammarAccess.getCommitmentAccess().getConsequentEExprParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEExprAccess().getRightOExprParserRuleCall_1_2_0()); }
	ruleOExpr{ after(grammarAccess.getEExprAccess().getRightOExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOExprAccess().getRightAExprParserRuleCall_1_2_0()); }
	ruleAExpr{ after(grammarAccess.getOExprAccess().getRightAExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExprAccess().getRightWExprParserRuleCall_1_2_0()); }
	ruleWExpr{ after(grammarAccess.getAExprAccess().getRightWExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WExpr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWExprAccess().getRightSTRINGTerminalRuleCall_1_2_0()); }
	RULE_STRING{ after(grammarAccess.getWExprAccess().getRightSTRINGTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__EventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_0_0()); }
	ruleEvent{ after(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__EventAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_1_0_0()); }
	ruleEvent{ after(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__LTimeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getLTimeTimeStampParserRuleCall_1_2_0()); }
	ruleTimeStamp{ after(grammarAccess.getIntervalAccess().getLTimeTimeStampParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__RTimeAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getRTimeTimeStampParserRuleCall_1_4_0()); }
	ruleTimeStamp{ after(grammarAccess.getIntervalAccess().getRTimeTimeStampParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__EventAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_2_0_0()); }
	ruleEvent{ after(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__RTimeAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getRTimeTimeStampParserRuleCall_2_3_0()); }
	ruleTimeStamp{ after(grammarAccess.getIntervalAccess().getRTimeTimeStampParserRuleCall_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__EventAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_3_0_0()); }
	ruleEvent{ after(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__LTimeAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getLTimeTimeStampParserRuleCall_3_2_0()); }
	ruleTimeStamp{ after(grammarAccess.getIntervalAccess().getLTimeTimeStampParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__EventAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_4_0_0()); }
	ruleEvent{ after(grammarAccess.getIntervalAccess().getEventEventParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__LifeStateAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLifeStateAlternatives_1_0_0()); }
(rule__Event__LifeStateAlternatives_1_0_0)
{ after(grammarAccess.getEventAccess().getLifeStateAlternatives_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__LabelAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLabelIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getLabelIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeStamp__ValAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeStampAccess().getValINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getTimeStampAccess().getValINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeStamp__EventReferenceAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeStampAccess().getEventReferenceEventParserRuleCall_1_0_0()); }
	ruleEvent{ after(grammarAccess.getTimeStampAccess().getEventReferenceEventParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeStamp__ShiftAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeStampAccess().getShiftINTTerminalRuleCall_1_1_1_0()); }
	RULE_INT{ after(grammarAccess.getTimeStampAccess().getShiftINTTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_SCHEMA : 'schema';

RULE_KEY : 'key';

RULE_TIME : 'time';

RULE_COMMIT : 'commitment';

RULE_CREATE : 'create';

RULE_DETACH : 'detach';

RULE_DISCHARGE : 'discharge';

RULE_TO : 'to';

RULE_EXCEPT : 'except';

RULE_AND : 'and';

RULE_OR : 'or';

RULE_WHERE : 'where';

RULE_CREATED : 'created';

RULE_DETACHED : 'detached';

RULE_DISCHARGED : 'discharged';

RULE_EXPIRED : 'expired';

RULE_VIOLATED : 'violated';

RULE_COMMA : ',';

RULE_LBRACKET : '[';

RULE_RBRACKET : ']';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_PLUS : '+';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


